geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",linetype="dashed")+
# geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50")
ggplot()+
#geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",shape=17)+
#geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2023,color="grey50",shape=15)+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50",shape=15)+
#  geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",linetype="dashed")+
# geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2023,color="grey50")+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50")
ggplot()+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Deep CPUE")
ggplot()+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Shallow-set CPUE")
ggplot()+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Shallow-set Standardized CPUE")
CPUE2018[1:6,2]/mean(CPUE2018[1:6,2]
)
CPUE2018$ShallowCentered<-c(CPUE2018[1:6,2]/mean(CPUE2018[1:6,2]),NA,NA,NA,NA,CPUE2018[11:22,2]/mean(CPUE2018[11:22,2]))
CPUE2023$ShallowCentered<-c(CPUE2023[1:6,2]/mean(CPUE2023[1:6,2]),NA,NA,NA,NA,CPUE2023[11:27,2]/mean(CPUE2023[11:27,2]))
ggplot()+
geom_point(aes(x=Year,y=ShallowCentered),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCentered),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCentered),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCentered),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Shallow-set Standardized CPUE")
ggplot()+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Deep-set Standardized CPUE")
png("ShallowCompared.png",height=4,width=8,units="in",res=200)
ggplot()+
geom_point(aes(x=Year,y=ShallowCentered),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCentered),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCentered),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCentered),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Shallow-set Standardized CPUE")
dev.off()
png("DeepCompared.png",height=4,width=8,units="in",res=200)
ggplot()+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Deep-set Standardized CPUE")
dev.off()
##plot APSM results using r4ss
#set working directory
# wd=c("C:\\Users\\Michelle.Sculley\\Documents\\2022 MLS ASSESS\\send20220204\\MLS_2022SA_000\\US Time Block\\R0_Prof")
# setwd(paste0(base.dir,"\\ModelDev\\NoSex\\TWN block\\JPN F1 block\\DW Size comp\\R0_Prof"))
# ## devtools::install_github("r4ss/r4ss") # to update r4ss
# ## load r4ss
library(r4ss)
suppressMessages(suppressWarnings(library(r4ss)))
library(ss3diags, quietly=T, warn.conflicts = F)
library(reshape2, quietly=T, warn.conflicts=F)
library(ggplot2, quietly=T, warn.conflicts=F)
base.dir<-"C://users//michelle.sculley//documents//2023 SWO ASSESS"
model.list<-c("01_Divide F9 size data",
"02_Drop S4 and S8",
"03_both 1 and 2",
"04_change Lmin",
"05_change settlement month",
"06_increase CV Lmin",
"07_lognormal selec",
"08_2 4 and 7",
"09_3 and 7",
"10_3 4 7 and 6",
"11_drop F20 decrease Amin",
"12_mirrow F9",
"13_mirrorF9 decrease Amin",
"14_mirrorF9 decrease Amin Fix eqcat",
"15_TWN selec")
#current.dir<-paste0(base.dir, "//ModelDev//Current Best")#//F9 Cubic Spline")
#current.dir<-paste0(base.dir,"//ModelDev//NoSex//TWN block//JPN F1 block//DW Size Comp//Split F9 size")
setwd(base.dir)
#### RUn just one
current.dir<-paste0(base.dir,"//SA Meeting Runs//",model.list[15])
plotdir<-paste0(current.dir,"//plots")
base.model<-SS_output(current.dir)#, printstats = FALSE, verbose=FALSE)
startyear = 1975
endyear = 2021
rnames <- base.model$derived_quants$Label
SS_plots(base.model, html = TRUE, png = TRUE, pdf=FALSE, catchasnumbers = TRUE)
# ## load r4ss
library(r4ss)
# ## load the model
# base.model<-SS_output(getwd())
# ## plot the model
# SS_plots(base.model, pdf = TRUE, png = FALSE, html=FALSE)
#
setwd(paste0(current.dir,"\\R0_Prof"))
rm(list=ls())
library('foreach')
#library('doMC') # Comment out for windows
library('doSNOW') # Uncomment for Windows
parm.min <- 6.2
parm.max <-7.8
parm.step <- 0.1
parmstr.parfile <- '# SR_parm\\[1]:' # Note that you need to add double backslash for escape character for grep
parfile <- 'ss.par'
ssdir.orig <- 'orig'
numcpus <- 8
#runss.str <- './SS324ab.bin -nohess -nox' # Comment out for windows
runss.str <- 'ss.exe -nohess -nox' # Uncomment for Windows
origwd <- getwd()
parm.vec <- seq(parm.min, parm.max, parm.step)
numdir <- length(parm.vec)
for (ii in 1:numdir) {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
parfile.infile <- paste(dir.name,'/',parfile, sep='')
conn <- file(parfile.infile, open='r')
parfile.intxt <- readLines(conn)
close(conn)
parfile.outtxt <- parfile.intxt
wantedline <- grep(parmstr.parfile,parfile.intxt)
parfile.outtxt[wantedline+1] <-  parm.vec[ii]
conn <- file(parfile.infile, open='w')
writeLines(parfile.outtxt, conn)
close(conn)
}
cl<-makeCluster(numcpus) # Uncomment for Windows
registerDoSNOW(cl) # Uncomment for Windows
for (ii in 1:numdir) {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
parfile.infile <- paste(dir.name,'/',parfile, sep='')
conn <- file(parfile.infile, open='r')
parfile.intxt <- readLines(conn)
close(conn)
parfile.outtxt <- parfile.intxt
wantedline <- grep(parmstr.parfile,parfile.intxt)
parfile.outtxt[wantedline+1] <-  parm.vec[ii]
conn <- file(parfile.infile, open='w')
writeLines(parfile.outtxt, conn)
close(conn)
}
cl<-makeCluster(numcpus) # Uncomment for Windows
registerDoSNOW(cl) # Uncomment for Windows
foreach(ii=1:numdir) %dopar% {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
setwd(paste(origwd,'/',dir.name,sep=''))
print(paste(origwd,'/',dir.name,sep=''))
system(runss.str)
setwd(origwd)
}
stopCluster(cl) # Uncomment for Windows
setwd(origwd)
library(colorRamps)
showplot_yn <- F
pdf_yn <- T
png_yn <- T
csv_yn <- T
mainfolder <- './'
pdf.filename <- paste('r0profile',format(Sys.time(), "%Y%m%d_%H%M.pdf"),sep='_')
png.filename <- paste('r0profile',format(Sys.time(), "%Y%m%d_%H%M"),sep='_')
csv.filename <- paste('r0profile',format(Sys.time(), "%Y%m%d_%H%M.csv"),sep='_')
mainlike_components <- c('TOTAL','Survey','Length_comp','Recruitment','Catch','Equil_catch')
#mainlike_components <- c('TOTAL','Survey','SizeFreq','Recruitment','Catch')
#fleetlike_components <- c('Surv_like','Length_like','SizeFreq_like:_1','SizeFreq_like:_2','SizeFreq_like:_3','Age_like')
#fleetlike_components_labels <- c('survey likelihood','2 cm bin likelihood', '7 cm bin likelihood','2 cm bin - Age-0 likelihood', '7 cm bin - Age-0 likelihood','Cond-Age-at-len likelihood')
fleetlike_components <- c('Surv_like','Catch_like','Length_like')
fleetlike_components_labels <- c('index likelihood','Catch Likelihood','Length Composition Likelihood')
ssdirpattern <- '^[0-9]{2}'
profile.string <- 'R0'
profile.label <- expression(log(italic(R)[0]))
setwd(mainfolder)
dirvec <- dir(pattern=ssdirpattern)
SSreps <- SSgetoutput(dirvec=dirvec,getcovar=F, forecast=FALSE)
summaryoutput <- SSsummarize(SSreps)
summaryoutput$likelihoods[1,]
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
sizefreqlike_component <- (grep('Survey',fleetlike_components))
if (length(sizefreqlike_component) > 0) {
for (ii in 1:length(sizefreqlike_component)) {
sizefreqlike_label <- fleetlike_components[sizefreqlike_component[ii]]
sizefreqlambda_label <-  sub('like','lambda',sizefreqlike_label)
sizefreqlambda <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlambda_label, 4:ncol(summaryoutput$likelihoods_by_fleet)]
sizefreqlike <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, 4:ncol(summaryoutput$likelihoods_by_fleet)] * sizefreqlambda
summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, names(summaryoutput$likelihoods_by_fleet)=='ALL'] <- rowSums(sizefreqlike, na.rm=T)
}
}
plotstuff <- function(){
SSplotProfile(summaryoutput,plot=T,print=F,profile.string='R0',profile.label=expression(log(italic(R)[0])),components=mainlike_components,component.labels=mainlike_components,col=c('black',blue2green2red(length(mainlike_components)-1)),legendloc='top')
for (ii in 1:length(fleetlike_components)) {
minlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,min)
maxlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,max)
difflike_byfleet <- maxlike_byfleet - minlike_byfleet
lambdas_byfleet <- colMeans(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii]))-1, colnames(lbf) %in% FleetNames]))
wantedFleets <-  which(lambdas_byfleet > 0)
ymax <- 1.3*max(difflike_byfleet[wantedFleets])
PinerPlot(summaryoutput,plot=T,print=F,profile.string='R0',component=fleetlike_components[ii],fleets=wantedFleets,col=c('black',blue2green2red(length(wantedFleets))),main=paste('Changes in',fleetlike_components_labels[ii],'by fleet'),ymax=ymax,legendloc='top', minfraction = 0.001)
}
}
printstuff <- function() {
like.table <- list()
like.table[[1]] <- SSplotProfile(summaryoutput,plot=F,print=F,profile.string='R0',components=mainlike_components,component.labels=mainlike_components)
for (ii in 1:length(fleetlike_components)) {
like.table[[ii+1]] <- PinerPlot(summaryoutput,plot=F,print=F,profile.string='R0',component=fleetlike_components[ii])
}
return(like.table)
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
source("~/2023 SWO ASSESS/Rscripts/001_LoadModel.R", echo=TRUE)
source("~/2023 SWO ASSESS/Rscripts/002_SummaryFigs.R", echo=TRUE)
Sensbase<-paste0(getwd(),"\\Sensitivities")
SensList<-c("\\1_base_case_highM",
"\\2_base_case_lowM",
"\\3_base_case_h070",
"\\4_Sensitivity_h081",
"\\5_Sensitivity_h099",
"\\6_Sensitivity_large_Amax",
"\\7_base_case_L50_177",
"\\8_base_case_L50_181",
"\\9_base_case_S1994",
"\\10_base_case_S1975",
"\\11_Drop_VNCN_catch",
"\\12_SWPO_SA9",
"\\13_Growth_2019",
"\\14_base-case_DFselec",
"\\15_Growth_2022",
"\\16_TWN doubleNorm Selec",
"\\17_Add F9 Size Data",
"\\18a_Only S2",
"\\18b_Only S4",
"\\18c_Only S5",
"\\18d_Only S7",
"\\18e_Only S8",
"\\18f_Only S7 and S8",
"\\19_All CPUE")
SensMods<-SSgetoutput(dirvec=for (i in 1:length(SensList)){paste0(SensBase,SensList[i])[1:5]})
Sensbase<-paste0(getwd(),"\\Sensitivities")
SensList<-c("\\1_base_case_highM",
"\\2_base_case_lowM",
"\\3_base_case_h070",
"\\4_Sensitivity_h081",
"\\5_Sensitivity_h099",
"\\6_Sensitivity_large_Amax",
"\\7_base_case_L50_177",
"\\8_base_case_L50_181",
"\\9_base_case_S1994",
"\\10_base_case_S1975",
"\\11_Drop_VNCN_catch",
"\\12_SWPO_SA9",
"\\13_Growth_2019",
"\\14_base-case_DFselec",
"\\15_Growth_2022",
"\\16_TWN doubleNorm Selec",
"\\17_Add F9 Size Data",
"\\18a_Only S2",
"\\18b_Only S4",
"\\18c_Only S5",
"\\18d_Only S7",
"\\18e_Only S8",
"\\18f_Only S7 and S8",
"\\19_All CPUE")
SensMods<-SSgetoutput(dirvec=for (i in 1:length(SensList)){paste0(SensBase,SensList[i])[1:5]})
SensMods<-SSgetoutput(dirvec=for (i in 1:length(SensList)){paste0(Sensbase,SensList[i])[1:5]})
Sensbase<-paste0(getwd(),"Final Base-case\\Sensitivities")
SensList<-c("\\1_base_case_highM",
"\\2_base_case_lowM",
"\\3_base_case_h070",
"\\4_Sensitivity_h081",
"\\5_Sensitivity_h099",
"\\6_Sensitivity_large_Amax",
"\\7_base_case_L50_177",
"\\8_base_case_L50_181",
"\\9_base_case_S1994",
"\\10_base_case_S1975",
"\\11_Drop_VNCN_catch",
"\\12_SWPO_SA9",
"\\13_Growth_2019",
"\\14_base-case_DFselec",
"\\15_Growth_2022",
"\\16_TWN doubleNorm Selec",
"\\17_Add F9 Size Data",
"\\18a_Only S2",
"\\18b_Only S4",
"\\18c_Only S5",
"\\18d_Only S7",
"\\18e_Only S8",
"\\18f_Only S7 and S8",
"\\19_All CPUE")
SensMods<-SSgetoutput(dirvec=for (i in 1:length(SensList)){paste0(Sensbase,SensList[i])[1:5]})
Sensbase<-paste0(getwd(),"\\Final Base-case\\Sensitivities")
Sensbase<-paste0(current.dir,"\\Sensitivities")
SensList<-c("\\1_base_case_highM",
"\\2_base_case_lowM",
"\\3_base_case_h070",
"\\4_Sensitivity_h081",
"\\5_Sensitivity_h099",
"\\6_Sensitivity_large_Amax",
"\\7_base_case_L50_177",
"\\8_base_case_L50_181",
"\\9_base_case_S1994",
"\\10_base_case_S1975",
"\\11_Drop_VNCN_catch",
"\\12_SWPO_SA9",
"\\13_Growth_2019",
"\\14_base-case_DFselec",
"\\15_Growth_2022",
"\\16_TWN doubleNorm Selec",
"\\17_Add F9 Size Data",
"\\18a_Only S2",
"\\18b_Only S4",
"\\18c_Only S5",
"\\18d_Only S7",
"\\18e_Only S8",
"\\18f_Only S7 and S8",
"\\19_All CPUE")
SensMods<-SSgetoutput(dirvec=for (i in 1:length(SensList)){paste0(Sensbase,SensList[i])[1:5]})
SensDir<-for (i in 1:length(SensList)){paste0(Sensbase,SensList[i])}[1:5]
SensMods<-SSgetoutput(dirvec=SensDir)
SSgetoutput
help(SSgetouput)
SensDir
for (i in 1:length(SensList)){paste0(Sensbase,SensList[i])}
for (i in 1:length(SensList)){SensDir<-paste0(Sensbase,SensList[i])}
SensMods<-SSgetoutput(dirvec=SensDir)
SensDir
for (i in 1:length(SensList)){SensDir[i]<-paste0(Sensbase,SensList[i])}
SensDir
SensMods<-SSgetoutput(dirvec=SensDir[1:5])
SensModsSum<-SSsummarize(SensMods)
SSplotComparisons(NatM_sens,png=TRUE, plotdir = paste0(dirbase,SensList[1]), legendlabels=c("base case","Model 1","Model 2"),  subplots = c(1,5,7),shadealpha = 0, filenameprefix = "SensNatM")
SSplotComparisons(NatM_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 1","Model 2"),  subplots = c(1,5,7),shadealpha = 0, filenameprefix = "SensNatM")
NatM_sens<-SSsummarize(list(base.model,SensMods[[1]],SensMods[[2]]))
SSplotComparisons(NatM_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 1","Model 2"),  subplots = c(1,5,7),shadealpha = 0, filenameprefix = "SensNatM")
SSplotComparisons(NatM_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 1","Model 2"),  subplots = c(1,5,7),shadealpha = 0, filenameprefix = "SensNatM_")
h_sens<-SSsummarize(list(base.model,SensMods[[3]],SensMods[[4]],SensMods[[5]]))
SSplotComparisons(h_sens,png=TRUE, plotdir = paste0(dirbase,SensList[4]), legendlabels=c("base case","Model 3","Model 4","Model 5"),subplots = c(1,5,7), shadealpha = 0, filenameprefix = "SensSteep_")
SSplotComparisons(h_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 3","Model 4","Model 5"),subplots = c(1,5,7), shadealpha = 0, filenameprefix = "SensSteep_")
h_sens<-SSsummarize(list(base.model,SensMods[[3]],SensMods[[4]])
)
SSplotComparisons(h_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 3","Model 4"),subplots = c(1,5,7), shadealpha = 0, filenameprefix = "SensSteep2_")
Sensbase<-paste0(current.dir,"\\Sensitivities")
SensList<-c("\\1_base_case_highM",
"\\2_base_case_lowM",
"\\3_base_case_h070",
"\\4_Sensitivity_h081",
"\\5_Sensitivity_h099",
"\\6_Sensitivity_large_Amax",
"\\7_Sensitivity_Sun_Growth",
"\\8_Sensitivity_high_L50",
"\\9_Sensitivity_low_L50",
"\\10_Sensitivity_L50_Wang2023",
"\\11a_Sensitivity_Drop_VNCN_catch",
"\\11b_Sensitivity_Drop_VNCN_catch_until2023",
"\\12_SWPO_SA9",
"\\13_Growth_2019",
"\\14_base-case_DFselec",
"\\15_Growth_2022",
"\\16_TWN doubleNorm Selec",
"\\17_Add F9 Size Data",
"\\18a_Only S2",
"\\18b_Only S4",
"\\18c_Only S5",
"\\18d_Only S7",
"\\18e_Only S8",
"\\18f_Only S7 and S8",
"\\19_All CPUE")
for (i in 1:length(SensList)){SensDir[i]<-paste0(Sensbase,SensList[i])}
SensMods<-SSgetoutput(dirvec=SensDir[1:12])
SensList<-c("\\1_base_case_highM",
"\\2_base_case_lowM",
"\\3_base_case_h070",
"\\4_Sensitivity_h081",
"\\5_Sensitivity_h099",
"\\6_Sensitivity_large_Amax",
"\\7_Sensitivity_Sun_Growth",
"\\8_Sensitivity_high_L50",
"\\9_Sensitivity_low_L50",
"\\10_Sensitivity_L50_Wang2023",
"\\11a_Sensitivity_Drop_VNCN_catch",
"\\11b_Sensitivity_Drop_VNCN_catch_until2021",
"\\12_SWPO_SA9",
"\\13_Growth_2019",
"\\14_base-case_DFselec",
"\\15_Growth_2022",
"\\16_TWN doubleNorm Selec",
"\\17_Add F9 Size Data",
"\\18a_Only S2",
"\\18b_Only S4",
"\\18c_Only S5",
"\\18d_Only S7",
"\\18e_Only S8",
"\\18f_Only S7 and S8",
"\\19_All CPUE")
for (i in 1:length(SensList)){SensDir[i]<-paste0(Sensbase,SensList[i])}
SensMods<-SSgetoutput(dirvec=SensDir[1:12])
SensModsSum<-SSsummarize(SensMods)
Growth_sens<-SSsummarize(list(base.model,SensMods[[6]], SensMods[[7]]))
SSplotComparisons(Growth_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 6","Model 7"), subplots = c(1,5,7),  shadealpha = 0, filenameprefix="SensGrowth_")
Growth_sens<-SSsummarize(list(base.model, SensMods[[7]]))
SSplotComparisons(Growth_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 7"), subplots = c(1,5,7),  shadealpha = 0, filenameprefix="SensGrowth2_")
Mat_sens<-SSsummarize(list(base.model,SensMods[[8]],SensMods[[9]],SensMods[[10]]))
SensList<-c("\\1_base_case_highM",
"\\2_base_case_lowM",
"\\3_base_case_h070",
"\\4_Sensitivity_h081",
"\\5_Sensitivity_h099",
"\\6_Sensitivity_large_Amax",
"\\7_Sensitivity_Sun_Growth",
"\\8_Sensitivity_high_L50",
"\\9_Sensitivity_low_L50",
"\\10_Sensitivity_L50_Wang2003",
"\\11a_Sensitivity_Drop_VNCN_catch",
"\\11b_Sensitivity_Drop_VNCN_catch_until2021",
"\\12_SWPO_SA9",
"\\13_Growth_2019",
"\\14_base-case_DFselec",
"\\15_Growth_2022",
"\\16_TWN doubleNorm Selec",
"\\17_Add F9 Size Data",
"\\18a_Only S2",
"\\18b_Only S4",
"\\18c_Only S5",
"\\18d_Only S7",
"\\18e_Only S8",
"\\18f_Only S7 and S8",
"\\19_All CPUE")
for (i in 1:length(SensList)){SensDir[i]<-paste0(Sensbase,SensList[i])}
SensMods<-SSgetoutput(dirvec=SensDir)
NatM_sens<-SSsummarize(list(base.model,SensMods[[1]],SensMods[[2]]))
SSplotComparisons(NatM_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 1","Model 2"),  subplots = c(1,5,7),shadealpha = 0, filenameprefix = "SensNatM_")
Growth_sens<-SSsummarize(list(base.model,SensMods[[6]], SensMods[[7]]))
SSplotComparisons(Growth_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 6","Model 7"), subplots = c(1,5,7),  shadealpha = 0, filenameprefix="SensGrowth_")
Growth_sens<-SSsummarize(list(base.model, SensMods[[7]]))
SSplotComparisons(Growth_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 7"), subplots = c(1,5,7),  shadealpha = 0, filenameprefix="SensGrowth2_")
Mat_sens<-SSsummarize(list(base.model,SensMods[[8]],SensMods[[9]],SensMods[[10]]))
SSplotComparisons(Mat_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 8","Model 9","Model 10"), subplots = c(1,5,7), shadealpha = 0, filenameprefix = "SensMat_")
Catch_sens<-SSsummarize(list(base.model,SensMods[[11]],SensMods[[12]],SensMods[[13]],SensMods[[14]]))
Catch_sens<-SSsummarize(list(base.model,SensMods[[11]],SensMods[[12]])#,SensMods[[13]],SensMods[[14]]))
)
CPUE_Sens<-SSsummarize(list(base.model,SensMods[[19]],SensMods[[20]],SensMods[[21]],SensMods[[22]],SensMods[[23]],SensMods[[24]],SensMods[[25]]))
length(SensList)
View(SensMods)
for (i in 1:length(SensList)){SensDir[i]<-paste0(Sensbase,SensList[i])}
SensMods<-SSgetoutput(dirvec=SensDir)
CPUE_Sens<-SSsummarize(list(base.model,SensMods[[19]],SensMods[[20]],SensMods[[21]],SensMods[[22]],SensMods[[23]],SensMods[[24]],SensMods[[25]]))
SSplotComparisons(Growth_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 18a","Model 18b","Model 18c","Model 18d","Model 18e","Model 18f","Model 19"), subplots = c(1,5,7),  shadealpha = 0, filenameprefix = "SensCPUE_")
SSplotComparisons(CPUE_sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 18a","Model 18b","Model 18c","Model 18d","Model 18e","Model 18f","Model 19"), subplots = c(1,5,7),  shadealpha = 0, filenameprefix = "SensCPUE_")
SSplotComparisons(CPUE_SSens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 18a","Model 18b","Model 18c","Model 18d","Model 18e","Model 18f","Model 19"), subplots = c(1,5,7),  shadealpha = 0, filenameprefix = "SensCPUE_")
SSplotComparisons(CPUE_Sens,png=TRUE, plotdir = plotdir, legendlabels=c("base case","Model 18a","Model 18b","Model 18c","Model 18d","Model 18e","Model 18f","Model 19"), subplots = c(1,5,7),  shadealpha = 0, filenameprefix = "SensCPUE_")
SensList<-c("\\1_base_case_highM",
"\\2_base_case_lowM",
"\\3_base_case_h070",
"\\4_Sensitivity_h081",
"\\5_Sensitivity_h099",
"\\6_Sensitivity_large_Amax",
"\\7_Sensitivity_Sun_Growth",
"\\8_Sensitivity_high_L50",
"\\9_Sensitivity_low_L50",
"\\10_Sensitivity_L50_Wang2003",
"\\11a_Sensitivity_Drop_VNCN_catch",
"\\11b_Sensitivity_Drop_VNCN_catch_until2021",
"\\12_Sensitivity_NP_all_Catch",
"\\13_Growth_2019",
"\\14_Change_Amin_1",
"\\15_Change_S6_lambda0",
"\\16_TWN doubleNorm Selec",
"\\17_Add F9 Size Data",
"\\18a_Only S2",
"\\18b_Only S4",
"\\18c_Only S5",
"\\18d_Only S7",
"\\18e_Only S8",
"\\18f_Only S7 and S8",
"\\19_All CPUE")
for (i in 1:length(SensList)){SensDir[i]<-paste0(Sensbase,SensList[i])}
SensMods<-SSgetoutput(dirvec=SensDir)
