geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2023,color="grey50",shape=15)+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2023,color="grey50")+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50")
ggplot()+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2018,color="black",shape=17)+
#  geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2023,color="grey50",shape=15)+
#  geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2018,color="black",linetype="dashed")+
# geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2023,color="grey50")+
ggplot()+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2018,color="black",shape=17)+
#  geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2023,color="grey50",shape=15)+
#  geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2018,color="black",linetype="dashed")+
# geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2023,color="grey50")
ggplot()+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",shape=17)+
#  geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2023,color="grey50",shape=15)+
#  geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2018,color="black",linetype="dashed")+
# geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2023,color="grey50")
ggplot()+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",shape=17)+
#  geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50",shape=15)+
#  geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",linetype="dashed")+
# geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50")
ggplot()+
#geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",shape=17)+
#geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2023,color="grey50",shape=15)+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50",shape=15)+
#  geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",linetype="dashed")+
# geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE)),data=CPUE2023,color="grey50")+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50")
ggplot()+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Deep CPUE")
ggplot()+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Shallow-set CPUE")
ggplot()+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCPUE/mean(ShallowCPUE,na.rm=TRUE)),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Shallow-set Standardized CPUE")
CPUE2018[1:6,2]/mean(CPUE2018[1:6,2]
)
CPUE2018$ShallowCentered<-c(CPUE2018[1:6,2]/mean(CPUE2018[1:6,2]),NA,NA,NA,NA,CPUE2018[11:22,2]/mean(CPUE2018[11:22,2]))
CPUE2023$ShallowCentered<-c(CPUE2023[1:6,2]/mean(CPUE2023[1:6,2]),NA,NA,NA,NA,CPUE2023[11:27,2]/mean(CPUE2023[11:27,2]))
ggplot()+
geom_point(aes(x=Year,y=ShallowCentered),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCentered),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCentered),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCentered),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Shallow-set Standardized CPUE")
ggplot()+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Deep-set Standardized CPUE")
png("ShallowCompared.png",height=4,width=8,units="in",res=200)
ggplot()+
geom_point(aes(x=Year,y=ShallowCentered),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=ShallowCentered),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=ShallowCentered),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=ShallowCentered),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Shallow-set Standardized CPUE")
dev.off()
png("DeepCompared.png",height=4,width=8,units="in",res=200)
ggplot()+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",shape=17)+
geom_point(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50",shape=15)+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2018,color="black",linetype="dashed")+
geom_line(aes(x=Year,y=DeepCPUE/mean(DeepCPUE)),data=CPUE2023,color="grey50")+
theme_bw()+
ylab("Deep-set Standardized CPUE")
dev.off()
ASPMDir<-paste0(current.dir,"\\ASPM")
ASPM<-SS_output(ASPMDir)
ASPMSumBioSpawn<-ASPM$derived_quants[which(ASPM$derived_quants==paste0("SSB_",startyear)):which(ASPM$derived_quants==paste0("SSB_",endyear)),]
ASPMSumBioSpawn$Year<-seq(startyear, endyear,1)
#SS_plots(ASPM)
#png("plots\\ASPMBiomass_Spawn.png",height=8,width=18, units="in",res=300)
ASPM_Plot<-ggplot()+
geom_point(aes(x=Year,y=Value), data=SumBioSpawn,size=1)+
geom_line(aes(x=Year,y=Value), data=SumBioSpawn,size=1)+
geom_point(aes(x=Year,y=Value), data=ASPMSumBioSpawn,size=1, shape=17)+
geom_line(aes(x=Year,y=Value), data=ASPMSumBioSpawn,size=1, linetype="dashed")+
geom_ribbon(aes(x=Year,ymin=max(Value-1.96*StdDev,0),ymax=Value+1.96*StdDev),data=SumBioSpawn,alpha=0.2)+
geom_ribbon(aes(x=Year,ymin=max(Value-1.96*StdDev,0),ymax=Value+1.96*StdDev),data=ASPMSumBioSpawn,alpha=0.2)+
ylab("Spawning Biomass (mt)") +
xlab("Year")+
theme(axis.text.x=element_text(size=8), axis.title.x=element_text(size=12),
axis.text.y=element_text(size=8),axis.title.y=element_text(size=12),
panel.border = element_rect(color="black",fill=NA,size=1),
panel.background = element_blank())+
scale_x_continuous(breaks=seq(startyear,endyear,5))# +
base.dir<-"C://users//michelle.sculley//documents//2023 SWO ASSESS"
suppressMessages(suppressWarnings(library(r4ss)))
library(ss3diags, quietly=T, warn.conflicts = F)
library(reshape2, quietly=T, warn.conflicts=F)
library(ggplot2, quietly=T, warn.conflicts=F)
current.dir<-paste0(base.dir,"//ModelDev//NoSex//TWN block//JPN F1 block//DW Size Comp")
setwd(base.dir)
plotdir<-paste0(current.dir,"//plots")
base.model<-SS_output(current.dir, printstats = FALSE, verbose=FALSE)
SS_plots(base.model, html = FALSE, png = TRUE, pdf=FALSE, catchasnumbers = TRUE)
SS_plots(base.model, html = TRUE, png = TRUE, pdf=FALSE, catchasnumbers = TRUE)
library(r4ss,warn.conflicts = F, quietly = T)
library(ss3diags,warn.conflicts = F, quietly = T)
library(ggplot2,warn.conflicts = F, quietly = T)
library(reshape2,warn.conflicts = F, quietly = T)
library(scales,warn.conflicts = F, quietly = T)
library(RColorBrewer,warn.conflicts = F, quietly = T)
library(gridExtra,warn.conflicts = F, quietly = T)
library(dplyr,warn.conflicts = F, quietly = T)
library(tidyr,warn.conflicts = F, quietly = T)
SummBio<-base.model$timeseries[,c("Yr","Seas","Bio_all","Bio_smry","SpawnBio","Recruit_0")]
SumBioAll<-subset(SummBio,Seas==1)[,c("Yr","Bio_all")]
SumBiosmry<-subset(SummBio,Seas==1)[,c("Yr","Bio_smry")]
SumRecruit<-base.model$derived_quants[which(base.model$derived_quants==paste0("Recr_",startyear)):which(base.model$derived_quants==paste0("Recr_",endyear)),]
SumRecruit$Year<-seq(startyear, endyear,1)
SumBioSpawn<-base.model$derived_quants[which(base.model$derived_quants==paste0("SSB_",startyear)):which(base.model$derived_quants==paste0("SSB_",endyear)),]
SumBioSpawn$Year<-seq(startyear,endyear,1)
SSBTarget<-base.model$derived_quants[which(base.model$derived_quants$Label=="SSB_Btgt"),2]
SSBRatio<-SumBioSpawn$Value/base.model$derived_quants[1,2]
SSBdynRatio<-SumBioSpawn$Value/SSBTarget
Fseries<-base.model$derived_quants[which(base.model$derived_quants==paste0("F_",startyear)):which(base.model$derived_quants==paste0("F_",endyear)),]
Fseries$Year<-seq(startyear,endyear,1)
index_Fstd_MSY = which(rnames==paste("annF_MSY",sep=""))
index_Fstd_Btarget = which(rnames==paste("annF_Btgt",sep=""))
Fstd_MSY_est = base.model$derived_quants[index_Fstd_MSY:index_Fstd_MSY,2]
Fstd_Btgt_est = base.model$derived_quants[index_Fstd_Btarget:index_Fstd_Btarget,2]
index_Bstd_MSY = which(rnames==paste("SSB_MSY",sep=""))
index_Bstd_Btarget = which(rnames==paste("SSB_Btgt",sep=""))
SSBstd_MSY_est = base.model$derived_quants[index_Bstd_MSY:index_Bstd_MSY,2]
SSBstd_Btgt_est = base.model$derived_quants[index_Bstd_Btarget:index_Bstd_Btarget,2]
SumRecruit$LB<-SumRecruit$Value-1.96*SumRecruit$StdDev
SumRecruit$LB<-ifelse(SumRecruit$LB<0,0,SumRecruit$LB)
startyear = 1975
endyear = 2021
rnames <- base.model$derived_quants$Label
SummBio<-base.model$timeseries[,c("Yr","Seas","Bio_all","Bio_smry","SpawnBio","Recruit_0")]
SumBioAll<-subset(SummBio,Seas==1)[,c("Yr","Bio_all")]
SumBiosmry<-subset(SummBio,Seas==1)[,c("Yr","Bio_smry")]
SumRecruit<-base.model$derived_quants[which(base.model$derived_quants==paste0("Recr_",startyear)):which(base.model$derived_quants==paste0("Recr_",endyear)),]
SumRecruit$Year<-seq(startyear, endyear,1)
SumBioSpawn<-base.model$derived_quants[which(base.model$derived_quants==paste0("SSB_",startyear)):which(base.model$derived_quants==paste0("SSB_",endyear)),]
SumBioSpawn$Year<-seq(startyear,endyear,1)
SSBTarget<-base.model$derived_quants[which(base.model$derived_quants$Label=="SSB_Btgt"),2]
SSBRatio<-SumBioSpawn$Value/base.model$derived_quants[1,2]
SSBdynRatio<-SumBioSpawn$Value/SSBTarget
Fseries<-base.model$derived_quants[which(base.model$derived_quants==paste0("F_",startyear)):which(base.model$derived_quants==paste0("F_",endyear)),]
Fseries$Year<-seq(startyear,endyear,1)
index_Fstd_MSY = which(rnames==paste("annF_MSY",sep=""))
index_Fstd_Btarget = which(rnames==paste("annF_Btgt",sep=""))
Fstd_MSY_est = base.model$derived_quants[index_Fstd_MSY:index_Fstd_MSY,2]
Fstd_Btgt_est = base.model$derived_quants[index_Fstd_Btarget:index_Fstd_Btarget,2]
index_Bstd_MSY = which(rnames==paste("SSB_MSY",sep=""))
index_Bstd_Btarget = which(rnames==paste("SSB_Btgt",sep=""))
SSBstd_MSY_est = base.model$derived_quants[index_Bstd_MSY:index_Bstd_MSY,2]
SSBstd_Btgt_est = base.model$derived_quants[index_Bstd_Btarget:index_Bstd_Btarget,2]
SumRecruit$LB<-SumRecruit$Value-1.96*SumRecruit$StdDev
SumRecruit$LB<-ifelse(SumRecruit$LB<0,0,SumRecruit$LB)
ggplot()+
geom_point(aes(x=Year,y=Value), data=SumBioSpawn,size=1)+
geom_errorbar(aes(x=Year,ymin=max(Value-1.96*StdDev,0),ymax=Value+1.96*StdDev),data=SumBioSpawn,size=1)+
geom_line(aes(x=Year,y=Value),data=SumBioSpawn,size=1)+
geom_hline(yintercept=0.9*base.model$derived_quants[which(base.model$derived_quants[,1]=="SSB_MSY"),2],color="green",linetype = 2, size=1)+
ylab("Female Spawning Biomass (mt)") +
theme(axis.text.x=element_text(size=10), axis.title.x=element_text(size=12),
axis.text.y=element_text(size=10),axis.title.y=element_text(size=12),
panel.border = element_rect(color="black",fill=NA,size=1),
panel.background = element_blank())+
geom_text(aes(x = 2015,y=base.model$derived_quants[which(base.model$derived_quants[,1]=="SSB_MSY"),2]+1000,label=as.character(expression(SSB[MSY]))),parse=TRUE, size=6) +
scale_x_continuous(breaks=seq(startyear,endyear,5))
current.dir<-paste0(base.dir,"//ModelDev//NoSex//TWN block//JPN F1 block//DW Size Comp")
base.model<-SS_output(current.dir, printstats = FALSE, verbose=FALSE)
SS_plots(base.model, html = TRUE, png = TRUE, pdf=FALSE, catchasnumbers = TRUE)
base.model$fleet_ID
base.model$FleetNames
base.dir
setwd(paste0(base.dir,"\\ModelDev\\NoSex\\TWN block\\JPN F1 block\\DW Size comp\\R0_Prof"))
# ## devtools::install_github("r4ss/r4ss") # to update r4ss
# ## load r4ss
library(r4ss)
rm(list=ls())
library('foreach')
#library('doMC') # Comment out for windows
library('doSNOW') # Uncomment for Windows
parm.min <- 6.2
parm.max <-8.0
parm.step <- 0.1
parmstr.parfile <- '# SR_parm\\[1]:' # Note that you need to add double backslash for escape character for grep
parfile <- 'ss.par'
ssdir.orig <- 'orig'
numcpus <- 8
#runss.str <- './SS324ab.bin -nohess -nox' # Comment out for windows
runss.str <- 'ss.exe -nohess -nox' # Uncomment for Windows
origwd <- getwd()
parm.vec <- seq(parm.min, parm.max, parm.step)
numdir <- length(parm.vec)
for (ii in 1:numdir) {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
parfile.infile <- paste(dir.name,'/',parfile, sep='')
conn <- file(parfile.infile, open='r')
parfile.intxt <- readLines(conn)
close(conn)
parfile.outtxt <- parfile.intxt
wantedline <- grep(parmstr.parfile,parfile.intxt)
parfile.outtxt[wantedline+1] <-  parm.vec[ii]
conn <- file(parfile.infile, open='w')
writeLines(parfile.outtxt, conn)
close(conn)
}
cl<-makeCluster(numcpus) # Uncomment for Windows
registerDoSNOW(cl) # Uncomment for Windows
foreach(ii=1:numdir) %dopar% {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
setwd(paste(origwd,'/',dir.name,sep=''))
print(paste(origwd,'/',dir.name,sep=''))
system(runss.str)
setwd(origwd)
}
stopCluster(cl) # Uncomment for Windows
setwd(origwd)
for (ii in 1:numdir) {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
parfile.infile <- paste(dir.name,'/',parfile, sep='')
conn <- file(parfile.infile, open='r')
parfile.intxt <- readLines(conn)
close(conn)
parfile.outtxt <- parfile.intxt
wantedline <- grep(parmstr.parfile,parfile.intxt)
parfile.outtxt[wantedline+1] <-  parm.vec[ii]
conn <- file(parfile.infile, open='w')
writeLines(parfile.outtxt, conn)
close(conn)
}
#registerDoMC(numcpus) # Comment out for windows
cl<-makeCluster(numcpus) # Uncomment for Windows
registerDoSNOW(cl) # Uncomment for Windows
foreach(ii=1:numdir) %dopar% {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
setwd(paste(origwd,'/',dir.name,sep=''))
print(paste(origwd,'/',dir.name,sep=''))
system(runss.str)
setwd(origwd)
}
stopCluster(cl) # Uncomment for Windows
setwd(origwd)
showplot_yn <- F
pdf_yn <- T
png_yn <- T
csv_yn <- T
mainfolder <- './'
pdf.filename <- paste('r0profile',format(Sys.time(), "%Y%m%d_%H%M.pdf"),sep='_')
png.filename <- paste('r0profile',format(Sys.time(), "%Y%m%d_%H%M"),sep='_')
csv.filename <- paste('r0profile',format(Sys.time(), "%Y%m%d_%H%M.csv"),sep='_')
mainlike_components <- c('TOTAL','Survey','Length_comp','Recruitment','Catch','Equil_catch')
#mainlike_components <- c('TOTAL','Survey','SizeFreq','Recruitment','Catch')
#fleetlike_components <- c('Surv_like','Length_like','SizeFreq_like:_1','SizeFreq_like:_2','SizeFreq_like:_3','Age_like')
#fleetlike_components_labels <- c('survey likelihood','2 cm bin likelihood', '7 cm bin likelihood','2 cm bin - Age-0 likelihood', '7 cm bin - Age-0 likelihood','Cond-Age-at-len likelihood')
fleetlike_components <- c('Surv_like','Catch_like','Length_like')
fleetlike_components_labels <- c('index likelihood','Catch Likelihood','Length Composition Likelihood')
ssdirpattern <- '^[0-9]{2}'
profile.string <- 'R0'
profile.label <- expression(log(italic(R)[0]))
setwd(mainfolder)
dirvec <- dir(pattern=ssdirpattern)
SSreps <- SSgetoutput(dirvec=dirvec,getcovar=F, forecast=FALSE)
summaryoutput <- SSsummarize(SSreps)
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
sizefreqlike_component <- (grep('Survey',fleetlike_components))
if (length(sizefreqlike_component) > 0) {
for (ii in 1:length(sizefreqlike_component)) {
sizefreqlike_label <- fleetlike_components[sizefreqlike_component[ii]]
sizefreqlambda_label <-  sub('like','lambda',sizefreqlike_label)
sizefreqlambda <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlambda_label, 4:ncol(summaryoutput$likelihoods_by_fleet)]
sizefreqlike <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, 4:ncol(summaryoutput$likelihoods_by_fleet)] * sizefreqlambda
summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, names(summaryoutput$likelihoods_by_fleet)=='ALL'] <- rowSums(sizefreqlike, na.rm=T)
}
}
plotstuff <- function(){
SSplotProfile(summaryoutput,plot=T,print=F,profile.string='R0',profile.label=expression(log(italic(R)[0])),components=mainlike_components,component.labels=mainlike_components,col=c('black',blue2green2red(length(mainlike_components)-1)),legendloc='top')
for (ii in 1:length(fleetlike_components)) {
minlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,min)
maxlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,max)
difflike_byfleet <- maxlike_byfleet - minlike_byfleet
lambdas_byfleet <- colMeans(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii]))-1, colnames(lbf) %in% FleetNames]))
wantedFleets <-  which(lambdas_byfleet > 0)
ymax <- 1.3*max(difflike_byfleet[wantedFleets])
PinerPlot(summaryoutput,plot=T,print=F,profile.string='R0',component=fleetlike_components[ii],fleets=wantedFleets,col=c('black',blue2green2red(length(wantedFleets))),main=paste('Changes in',fleetlike_components_labels[ii],'by fleet'),ymax=ymax,legendloc='top', minfraction = 0.001)
}
}
printstuff <- function() {
like.table <- list()
like.table[[1]] <- SSplotProfile(summaryoutput,plot=F,print=F,profile.string='R0',components=mainlike_components,component.labels=mainlike_components)
for (ii in 1:length(fleetlike_components)) {
like.table[[ii+1]] <- PinerPlot(summaryoutput,plot=F,print=F,profile.string='R0',component=fleetlike_components[ii])
}
return(like.table)
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
library(colorRamps)
summaryoutput$likelihoods[1,]
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
summaryoutput <- SSsummarize(SSreps)[c(1,3:15)]
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
sizefreqlike_component <- (grep('Survey',fleetlike_components))
if (length(sizefreqlike_component) > 0) {
for (ii in 1:length(sizefreqlike_component)) {
sizefreqlike_label <- fleetlike_components[sizefreqlike_component[ii]]
sizefreqlambda_label <-  sub('like','lambda',sizefreqlike_label)
sizefreqlambda <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlambda_label, 4:ncol(summaryoutput$likelihoods_by_fleet)]
sizefreqlike <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, 4:ncol(summaryoutput$likelihoods_by_fleet)] * sizefreqlambda
summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, names(summaryoutput$likelihoods_by_fleet)=='ALL'] <- rowSums(sizefreqlike, na.rm=T)
}
}
plotstuff <- function(){
SSplotProfile(summaryoutput,plot=T,print=F,profile.string='R0',profile.label=expression(log(italic(R)[0])),components=mainlike_components,component.labels=mainlike_components,col=c('black',blue2green2red(length(mainlike_components)-1)),legendloc='top')
for (ii in 1:length(fleetlike_components)) {
minlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,min)
maxlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,max)
difflike_byfleet <- maxlike_byfleet - minlike_byfleet
lambdas_byfleet <- colMeans(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii]))-1, colnames(lbf) %in% FleetNames]))
wantedFleets <-  which(lambdas_byfleet > 0)
ymax <- 1.3*max(difflike_byfleet[wantedFleets])
PinerPlot(summaryoutput,plot=T,print=F,profile.string='R0',component=fleetlike_components[ii],fleets=wantedFleets,col=c('black',blue2green2red(length(wantedFleets))),main=paste('Changes in',fleetlike_components_labels[ii],'by fleet'),ymax=ymax,legendloc='top', minfraction = 0.001)
}
}
printstuff <- function() {
like.table <- list()
like.table[[1]] <- SSplotProfile(summaryoutput,plot=F,print=F,profile.string='R0',components=mainlike_components,component.labels=mainlike_components)
for (ii in 1:length(fleetlike_components)) {
like.table[[ii+1]] <- PinerPlot(summaryoutput,plot=F,print=F,profile.string='R0',component=fleetlike_components[ii])
}
return(like.table)
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
summaryoutput <- SSsummarize(SSreps[c(1,3:15)])
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
sizefreqlike_component <- (grep('Survey',fleetlike_components))
if (length(sizefreqlike_component) > 0) {
for (ii in 1:length(sizefreqlike_component)) {
sizefreqlike_label <- fleetlike_components[sizefreqlike_component[ii]]
sizefreqlambda_label <-  sub('like','lambda',sizefreqlike_label)
sizefreqlambda <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlambda_label, 4:ncol(summaryoutput$likelihoods_by_fleet)]
sizefreqlike <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, 4:ncol(summaryoutput$likelihoods_by_fleet)] * sizefreqlambda
summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, names(summaryoutput$likelihoods_by_fleet)=='ALL'] <- rowSums(sizefreqlike, na.rm=T)
}
}
plotstuff <- function(){
SSplotProfile(summaryoutput,plot=T,print=F,profile.string='R0',profile.label=expression(log(italic(R)[0])),components=mainlike_components,component.labels=mainlike_components,col=c('black',blue2green2red(length(mainlike_components)-1)),legendloc='top')
for (ii in 1:length(fleetlike_components)) {
minlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,min)
maxlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,max)
difflike_byfleet <- maxlike_byfleet - minlike_byfleet
lambdas_byfleet <- colMeans(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii]))-1, colnames(lbf) %in% FleetNames]))
wantedFleets <-  which(lambdas_byfleet > 0)
ymax <- 1.3*max(difflike_byfleet[wantedFleets])
PinerPlot(summaryoutput,plot=T,print=F,profile.string='R0',component=fleetlike_components[ii],fleets=wantedFleets,col=c('black',blue2green2red(length(wantedFleets))),main=paste('Changes in',fleetlike_components_labels[ii],'by fleet'),ymax=ymax,legendloc='top', minfraction = 0.001)
}
}
printstuff <- function() {
like.table <- list()
like.table[[1]] <- SSplotProfile(summaryoutput,plot=F,print=F,profile.string='R0',components=mainlike_components,component.labels=mainlike_components)
for (ii in 1:length(fleetlike_components)) {
like.table[[ii+1]] <- PinerPlot(summaryoutput,plot=F,print=F,profile.string='R0',component=fleetlike_components[ii])
}
return(like.table)
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
summaryoutput <- SSsummarize(SSreps[c(1,5:15)])
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
sizefreqlike_component <- (grep('Survey',fleetlike_components))
if (length(sizefreqlike_component) > 0) {
for (ii in 1:length(sizefreqlike_component)) {
sizefreqlike_label <- fleetlike_components[sizefreqlike_component[ii]]
sizefreqlambda_label <-  sub('like','lambda',sizefreqlike_label)
sizefreqlambda <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlambda_label, 4:ncol(summaryoutput$likelihoods_by_fleet)]
sizefreqlike <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, 4:ncol(summaryoutput$likelihoods_by_fleet)] * sizefreqlambda
summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, names(summaryoutput$likelihoods_by_fleet)=='ALL'] <- rowSums(sizefreqlike, na.rm=T)
}
}
plotstuff <- function(){
SSplotProfile(summaryoutput,plot=T,print=F,profile.string='R0',profile.label=expression(log(italic(R)[0])),components=mainlike_components,component.labels=mainlike_components,col=c('black',blue2green2red(length(mainlike_components)-1)),legendloc='top')
for (ii in 1:length(fleetlike_components)) {
minlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,min)
maxlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,max)
difflike_byfleet <- maxlike_byfleet - minlike_byfleet
lambdas_byfleet <- colMeans(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii]))-1, colnames(lbf) %in% FleetNames]))
wantedFleets <-  which(lambdas_byfleet > 0)
ymax <- 1.3*max(difflike_byfleet[wantedFleets])
PinerPlot(summaryoutput,plot=T,print=F,profile.string='R0',component=fleetlike_components[ii],fleets=wantedFleets,col=c('black',blue2green2red(length(wantedFleets))),main=paste('Changes in',fleetlike_components_labels[ii],'by fleet'),ymax=ymax,legendloc='top', minfraction = 0.001)
}
}
printstuff <- function() {
like.table <- list()
like.table[[1]] <- SSplotProfile(summaryoutput,plot=F,print=F,profile.string='R0',components=mainlike_components,component.labels=mainlike_components)
for (ii in 1:length(fleetlike_components)) {
like.table[[ii+1]] <- PinerPlot(summaryoutput,plot=F,print=F,profile.string='R0',component=fleetlike_components[ii])
}
return(like.table)
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
