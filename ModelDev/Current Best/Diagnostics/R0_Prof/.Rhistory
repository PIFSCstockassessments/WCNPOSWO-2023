ssdirpattern <- '^[0-9]{2}'
profile.string <- 'R0'
profile.label <- expression(log(italic(R)[0]))
setwd(mainfolder)
dirvec <- dir(pattern=ssdirpattern)
SSreps <- SSgetoutput(dirvec=dirvec,getcovar=F, forecast=FALSE)
summaryoutput <- SSsummarize(SSreps)
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
sizefreqlike_component <- (grep('Survey',fleetlike_components))
if (length(sizefreqlike_component) > 0) {
for (ii in 1:length(sizefreqlike_component)) {
sizefreqlike_label <- fleetlike_components[sizefreqlike_component[ii]]
sizefreqlambda_label <-  sub('like','lambda',sizefreqlike_label)
sizefreqlambda <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlambda_label, 4:ncol(summaryoutput$likelihoods_by_fleet)]
sizefreqlike <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, 4:ncol(summaryoutput$likelihoods_by_fleet)] * sizefreqlambda
summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, names(summaryoutput$likelihoods_by_fleet)=='ALL'] <- rowSums(sizefreqlike, na.rm=T)
}
}
plotstuff <- function(){
SSplotProfile(summaryoutput,plot=T,print=F,profile.string='R0',profile.label=expression(log(italic(R)[0])),components=mainlike_components,component.labels=mainlike_components,col=c('black',blue2green2red(length(mainlike_components)-1)),legendloc='top')
for (ii in 1:length(fleetlike_components)) {
minlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,min)
maxlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,max)
difflike_byfleet <- maxlike_byfleet - minlike_byfleet
lambdas_byfleet <- colMeans(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii]))-1, colnames(lbf) %in% FleetNames]))
wantedFleets <-  which(lambdas_byfleet > 0)
ymax <- 1.3*max(difflike_byfleet[wantedFleets])
PinerPlot(summaryoutput,plot=T,print=F,profile.string='R0',component=fleetlike_components[ii],fleets=wantedFleets,col=c('black',blue2green2red(length(wantedFleets))),main=paste('Changes in',fleetlike_components_labels[ii],'by fleet'),ymax=ymax,legendloc='top', minfraction = 0.001)
}
}
printstuff <- function() {
like.table <- list()
like.table[[1]] <- SSplotProfile(summaryoutput,plot=F,print=F,profile.string='R0',components=mainlike_components,component.labels=mainlike_components)
for (ii in 1:length(fleetlike_components)) {
like.table[[ii+1]] <- PinerPlot(summaryoutput,plot=F,print=F,profile.string='R0',component=fleetlike_components[ii])
}
return(like.table)
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
summaryoutput <- SSsummarize(SSreps)[c(1,3:numdir)]
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
sizefreqlike_component <- (grep('Survey',fleetlike_components))
if (length(sizefreqlike_component) > 0) {
for (ii in 1:length(sizefreqlike_component)) {
sizefreqlike_label <- fleetlike_components[sizefreqlike_component[ii]]
sizefreqlambda_label <-  sub('like','lambda',sizefreqlike_label)
sizefreqlambda <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlambda_label, 4:ncol(summaryoutput$likelihoods_by_fleet)]
sizefreqlike <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, 4:ncol(summaryoutput$likelihoods_by_fleet)] * sizefreqlambda
summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, names(summaryoutput$likelihoods_by_fleet)=='ALL'] <- rowSums(sizefreqlike, na.rm=T)
}
}
plotstuff <- function(){
SSplotProfile(summaryoutput,plot=T,print=F,profile.string='R0',profile.label=expression(log(italic(R)[0])),components=mainlike_components,component.labels=mainlike_components,col=c('black',blue2green2red(length(mainlike_components)-1)),legendloc='top')
for (ii in 1:length(fleetlike_components)) {
minlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,min)
maxlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,max)
difflike_byfleet <- maxlike_byfleet - minlike_byfleet
lambdas_byfleet <- colMeans(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii]))-1, colnames(lbf) %in% FleetNames]))
wantedFleets <-  which(lambdas_byfleet > 0)
ymax <- 1.3*max(difflike_byfleet[wantedFleets])
PinerPlot(summaryoutput,plot=T,print=F,profile.string='R0',component=fleetlike_components[ii],fleets=wantedFleets,col=c('black',blue2green2red(length(wantedFleets))),main=paste('Changes in',fleetlike_components_labels[ii],'by fleet'),ymax=ymax,legendloc='top', minfraction = 0.001)
}
}
printstuff <- function() {
like.table <- list()
like.table[[1]] <- SSplotProfile(summaryoutput,plot=F,print=F,profile.string='R0',components=mainlike_components,component.labels=mainlike_components)
for (ii in 1:length(fleetlike_components)) {
like.table[[ii+1]] <- PinerPlot(summaryoutput,plot=F,print=F,profile.string='R0',component=fleetlike_components[ii])
}
return(like.table)
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
FleetNames <- summaryoutput$FleetNames[[1]]
FleetNames
lbf  <- summaryoutput$likelihoods_by_fleet
lbf
summaryoutput <- SSsummarize(SSreps[c(1,3:numdir)])
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
sizefreqlike_component <- (grep('Survey',fleetlike_components))
if (length(sizefreqlike_component) > 0) {
for (ii in 1:length(sizefreqlike_component)) {
sizefreqlike_label <- fleetlike_components[sizefreqlike_component[ii]]
sizefreqlambda_label <-  sub('like','lambda',sizefreqlike_label)
sizefreqlambda <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlambda_label, 4:ncol(summaryoutput$likelihoods_by_fleet)]
sizefreqlike <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, 4:ncol(summaryoutput$likelihoods_by_fleet)] * sizefreqlambda
summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, names(summaryoutput$likelihoods_by_fleet)=='ALL'] <- rowSums(sizefreqlike, na.rm=T)
}
}
plotstuff <- function(){
SSplotProfile(summaryoutput,plot=T,print=F,profile.string='R0',profile.label=expression(log(italic(R)[0])),components=mainlike_components,component.labels=mainlike_components,col=c('black',blue2green2red(length(mainlike_components)-1)),legendloc='top')
for (ii in 1:length(fleetlike_components)) {
minlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,min)
maxlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,max)
difflike_byfleet <- maxlike_byfleet - minlike_byfleet
lambdas_byfleet <- colMeans(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii]))-1, colnames(lbf) %in% FleetNames]))
wantedFleets <-  which(lambdas_byfleet > 0)
ymax <- 1.3*max(difflike_byfleet[wantedFleets])
PinerPlot(summaryoutput,plot=T,print=F,profile.string='R0',component=fleetlike_components[ii],fleets=wantedFleets,col=c('black',blue2green2red(length(wantedFleets))),main=paste('Changes in',fleetlike_components_labels[ii],'by fleet'),ymax=ymax,legendloc='top', minfraction = 0.001)
}
}
printstuff <- function() {
like.table <- list()
like.table[[1]] <- SSplotProfile(summaryoutput,plot=F,print=F,profile.string='R0',components=mainlike_components,component.labels=mainlike_components)
for (ii in 1:length(fleetlike_components)) {
like.table[[ii+1]] <- PinerPlot(summaryoutput,plot=F,print=F,profile.string='R0',component=fleetlike_components[ii])
}
return(like.table)
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
summaryoutput <- SSsummarize(SSreps[c(1:2,4:numdir)])
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
setwd(mainfolder)
dirvec <- dir(pattern=ssdirpattern)
SSreps <- SSgetoutput(dirvec=dirvec,getcovar=F, forecast=FALSE)
summaryoutput <- SSsummarize(SSreps[c(1:2,4:numdir)])
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
sizefreqlike_component <- (grep('Survey',fleetlike_components))
if (length(sizefreqlike_component) > 0) {
for (ii in 1:length(sizefreqlike_component)) {
sizefreqlike_label <- fleetlike_components[sizefreqlike_component[ii]]
sizefreqlambda_label <-  sub('like','lambda',sizefreqlike_label)
sizefreqlambda <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlambda_label, 4:ncol(summaryoutput$likelihoods_by_fleet)]
sizefreqlike <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, 4:ncol(summaryoutput$likelihoods_by_fleet)] * sizefreqlambda
summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, names(summaryoutput$likelihoods_by_fleet)=='ALL'] <- rowSums(sizefreqlike, na.rm=T)
}
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
base.dir<-"C://users//michelle.sculley//documents//2023 SWO ASSESS//ModelDev"
current.dir<-paste0(base.dir, "//NoSex//TWN block//JPN F1 block//DW size comp")#//F9 Cubic Spline")
setwd(base.dir)
plotdir<-paste0(current.dir,"//plots")
base.model<-SS_output(current.dir)
SS_plots(base.model, html = TRUE, png = TRUE, catchasnumbers = TRUE)
sspar(mfrow=c(4,2),plot.cex = 0.8)
SSplotRunstest(base.model,subplots="cpue",add=T,cex.main = 0.8) # use add=T to maintain plot set up
png(paste0(plotdir,"//LengthRunsTest.png"),height=8,width=8, units="in",res=200)
SSplotRunstest(base.model,subplots="len",add=T,cex.main = 0.8) # use add=T to maintain plot set up
dev.off()
png(paste0(plotdir,"//CPUERunsTest.png"),height=8,width=8, units="in",res=200)
SSplotRunstest(base.model,subplots="cpue",add=T,cex.main = 0.8) # use add=T to maintain plot set up
dev.off()
SSplotRunstest(base.model,subplots="len",add=T,cex.main = 0.8) # use add=T to maintain plot set up
png(paste0(plotdir,"//CPUERunsTest.png"),height=8,width=8, units="in",res=200)
SSplotRunstest(base.model,subplots="cpue",add=T,cex.main = 0.8) # use add=T to maintain plot set up
dev.off()
png(paste0(plotdir,"//LengthRunsTest.png"),height=8,width=8, units="in",res=200)
SSplotRunstest(base.model,subplots="len",add=T,cex.main = 0.8) # use add=T to maintain plot set up
dev.off()
setwd(paste0(current.dir,"\\R0_Prof"))
parm.min <- 6.2
parm.max <-8.0
parm.step <- 0.1
parmstr.parfile <- '# SR_parm\\[1]:' # Note that you need to add double backslash for escape character for grep
parfile <- 'ss.par'
ssdir.orig <- 'orig'
numcpus <- 8
#runss.str <- './SS324ab.bin -nohess -nox' # Comment out for windows
runss.str <- 'ss.exe -nohess -nox' # Uncomment for Windows
origwd <- getwd()
parm.vec <- seq(parm.min, parm.max, parm.step)
numdir <- length(parm.vec)
for (ii in 1:numdir) {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
parfile.infile <- paste(dir.name,'/',parfile, sep='')
conn <- file(parfile.infile, open='r')
parfile.intxt <- readLines(conn)
close(conn)
parfile.outtxt <- parfile.intxt
wantedline <- grep(parmstr.parfile,parfile.intxt)
parfile.outtxt[wantedline+1] <-  parm.vec[ii]
conn <- file(parfile.infile, open='w')
writeLines(parfile.outtxt, conn)
close(conn)
}
#registerDoMC(numcpus) # Comment out for windows
cl<-makeCluster(numcpus) # Uncomment for Windows
registerDoSNOW(cl) # Uncomment for Windows
foreach(ii=1:numdir) %dopar% {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
setwd(paste(origwd,'/',dir.name,sep=''))
print(paste(origwd,'/',dir.name,sep=''))
system(runss.str)
setwd(origwd)
}
stopCluster(cl) # Uncomment for Windows
setwd(origwd)
showplot_yn <- F
pdf_yn <- T
png_yn <- T
csv_yn <- T
mainfolder <- './'
pdf.filename <- paste('r0profile',format(Sys.time(), "%Y%m%d_%H%M.pdf"),sep='_')
png.filename <- paste('r0profile',format(Sys.time(), "%Y%m%d_%H%M"),sep='_')
csv.filename <- paste('r0profile',format(Sys.time(), "%Y%m%d_%H%M.csv"),sep='_')
mainlike_components <- c('TOTAL','Survey','Length_comp','Recruitment','Catch')
#mainlike_components <- c('TOTAL','Survey','SizeFreq','Recruitment','Catch')
#fleetlike_components <- c('Surv_like','Length_like','SizeFreq_like:_1','SizeFreq_like:_2','SizeFreq_like:_3','Age_like')
#fleetlike_components_labels <- c('survey likelihood','2 cm bin likelihood', '7 cm bin likelihood','2 cm bin - Age-0 likelihood', '7 cm bin - Age-0 likelihood','Cond-Age-at-len likelihood')
fleetlike_components <- c('Surv_like','Catch_like','Length_like')
fleetlike_components_labels <- c('index likelihood','Catch Likelihood','Length Composition Likelihood')
ssdirpattern <- '^[0-9]{2}'
profile.string <- 'R0'
profile.label <- expression(log(italic(R)[0]))
setwd(mainfolder)
dirvec <- dir(pattern=ssdirpattern)
SSreps <- SSgetoutput(dirvec=dirvec,getcovar=F, forecast=FALSE)
summaryoutput <- SSsummarize(SSreps)
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
summaryoutput$likelihoods[1,]
dirvec <- dir(pattern=ssdirpattern)
SSreps <- SSgetoutput(dirvec=dirvec,getcovar=F, forecast=FALSE)
summaryoutput <- SSsummarize(SSreps)
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
sizefreqlike_component <- (grep('Survey',fleetlike_components))
if (length(sizefreqlike_component) > 0) {
for (ii in 1:length(sizefreqlike_component)) {
sizefreqlike_label <- fleetlike_components[sizefreqlike_component[ii]]
sizefreqlambda_label <-  sub('like','lambda',sizefreqlike_label)
sizefreqlambda <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlambda_label, 4:ncol(summaryoutput$likelihoods_by_fleet)]
sizefreqlike <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, 4:ncol(summaryoutput$likelihoods_by_fleet)] * sizefreqlambda
summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, names(summaryoutput$likelihoods_by_fleet)=='ALL'] <- rowSums(sizefreqlike, na.rm=T)
}
}
plotstuff <- function(){
SSplotProfile(summaryoutput,plot=T,print=F,profile.string='R0',profile.label=expression(log(italic(R)[0])),components=mainlike_components,component.labels=mainlike_components,col=c('black',blue2green2red(length(mainlike_components)-1)),legendloc='top')
for (ii in 1:length(fleetlike_components)) {
minlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,min)
maxlike_byfleet <- apply(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii])), colnames(lbf) %in% FleetNames]),2,max)
difflike_byfleet <- maxlike_byfleet - minlike_byfleet
lambdas_byfleet <- colMeans(as.matrix(lbf[(which(lbf$Label %in% fleetlike_components[ii]))-1, colnames(lbf) %in% FleetNames]))
wantedFleets <-  which(lambdas_byfleet > 0)
ymax <- 1.3*max(difflike_byfleet[wantedFleets])
PinerPlot(summaryoutput,plot=T,print=F,profile.string='R0',component=fleetlike_components[ii],fleets=wantedFleets,col=c('black',blue2green2red(length(wantedFleets))),main=paste('Changes in',fleetlike_components_labels[ii],'by fleet'),ymax=ymax,legendloc='top', minfraction = 0.001)
}
}
printstuff <- function() {
like.table <- list()
like.table[[1]] <- SSplotProfile(summaryoutput,plot=F,print=F,profile.string='R0',components=mainlike_components,component.labels=mainlike_components)
for (ii in 1:length(fleetlike_components)) {
like.table[[ii+1]] <- PinerPlot(summaryoutput,plot=F,print=F,profile.string='R0',component=fleetlike_components[ii])
}
return(like.table)
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
SSplotRunstest(base.model,subplots="cpue",add=T,cex.main = 0.8) # use add=T to maintain plot set up
png(paste0(plotdir,"//CPUERunsTest.png"),height=8,width=8, units="in",res=200)
SSplotRunstest(base.model,subplots="cpue",add=T,cex.main = 0.8) # use add=T to maintain plot set up
dev.off()
SSplotRunstest(base.model,subplots="len",add=T,cex.main = 0.8) # use add=T to maintain plot set up
png(paste0(plotdir,"//LengthRunsTest.png"),height=8,width=8, units="in",res=200)
SSplotRunstest(base.model,subplots="len",add=T,cex.main = 0.8) # use add=T to maintain plot set up
dev.off()
current.dir<-paste0(base.dir, "//NoSex//TWN block//JPN F1 block//DW size comp//Srop S4")#//F9 Cubic Spline")
plotdir<-paste0(current.dir,"//plots")
base.model<-SS_output(current.dir)
SS_plots(base.model, html = TRUE, png = TRUE, catchasnumbers = TRUE)
current.dir<-paste0(base.dir, "//NoSex//TWN block//JPN F1 block//DW size comp//Drop S4")#//F9 Cubic Spline")
plotdir<-paste0(current.dir,"//plots")
base.model<-SS_output(current.dir)
SS_plots(base.model, html = TRUE, png = TRUE, catchasnumbers = TRUE)
SSplotRunstest(base.model,subplots="cpue",add=T,cex.main = 0.8) # use add=T to maintain plot set up
sspar(mfrow=c(4,2),plot.cex = 0.8)
SSplotRunstest(base.model,subplots="cpue",add=T,cex.main = 0.8) # use add=T to maintain plot set up
SSplotRunstest(base.model,subplots="len",add=T,cex.main = 0.8) # use add=T to maintain plot set up
current.dir<-paste0(base.dir, "//NoSex//TWN block//JPN F1 block//Drop IATTC years")#//F9 Cubic Spline")
plotdir<-paste0(current.dir,"//plots")
base.model<-SS_output(current.dir)
SS_plots(base.model, html = TRUE, png = TRUE, catchasnumbers = TRUE)
SSplotRunstest(base.model,subplots="cpue",add=T,cex.main = 0.8) # use add=T to maintain plot set up
sspar(mfrow=c(4,2),plot.cex = 0.8)
SSplotRunstest(base.model,subplots="cpue",add=T,cex.main = 0.8) # use add=T to maintain plot set up
SSplotRunstest(base.model,subplots="len",add=T,cex.main = 0.8) # use add=T to maintain plot set up
current.dir<-paste0(base.dir, "//NoSex//TWN block//JPN F1 block/DW Size Comp")#//F9 Cubic Spline")
plotdir<-paste0(current.dir,"//plots")
base.model<-SS_output(current.dir)
SS_plots(base.model, html = TRUE, png = TRUE, catchasnumbers = TRUE)
sspar(mfrow=c(4,2),plot.cex = 0.8)
SSplotRunstest(base.model,subplots="cpue",add=T,cex.main = 0.8) # use add=T to maintain plot set up
SSplotRunstest(base.model,subplots="len",add=T,cex.main = 0.8) # use add=T to maintain plot set up
png(paste0(plotdir,"//CPUERunsTest.png"),height=8,width=8, units="in",res=200)
SSplotRunstest(base.model,subplots="cpue",add=T,cex.main = 0.8) # use add=T to maintain plot set up
dev.off()
# Add Joint Residual plot and use ploting option
SSplotJABBAres(base.model,subplots="cpue",add=T,legendcex = 0.5,ylimAdj = 2)
png(paste0(plotdir,"//LengthRunsTest.png"),height=8,width=8, units="in",res=200)
SSplotRunstest(base.model,subplots="len",add=T,cex.main = 0.8) # use add=T to maintain plot set up
dev.off()
setwd(paste0(current.dir,"\\R0_Prof"))
library('foreach')
#library('doMC') # Comment out for windows
library('doSNOW') # Uncomment for Windows
parm.min <- 6.2
parm.max <-8.0
parm.step <- 0.1
parmstr.parfile <- '# SR_parm\\[1]:' # Note that you need to add double backslash for escape character for grep
parfile <- 'ss.par'
ssdir.orig <- 'orig'
numcpus <- 8
#runss.str <- './SS324ab.bin -nohess -nox' # Comment out for windows
runss.str <- 'ss.exe -nohess -nox' # Uncomment for Windows
origwd <- getwd()
parm.vec <- seq(parm.min, parm.max, parm.step)
numdir <- length(parm.vec)
for (ii in 1:numdir) {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
parfile.infile <- paste(dir.name,'/',parfile, sep='')
conn <- file(parfile.infile, open='r')
parfile.intxt <- readLines(conn)
close(conn)
parfile.outtxt <- parfile.intxt
wantedline <- grep(parmstr.parfile,parfile.intxt)
parfile.outtxt[wantedline+1] <-  parm.vec[ii]
conn <- file(parfile.infile, open='w')
writeLines(parfile.outtxt, conn)
close(conn)
}
#registerDoMC(numcpus) # Comment out for windows
cl<-makeCluster(numcpus) # Uncomment for Windows
registerDoSNOW(cl) # Uncomment for Windows
foreach(ii=1:numdir) %dopar% {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
setwd(paste(origwd,'/',dir.name,sep=''))
print(paste(origwd,'/',dir.name,sep=''))
system(runss.str)
setwd(origwd)
}
stopCluster(cl) # Uncomment for Windows
setwd(origwd)
for (ii in 1:numdir) {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
#	system(paste('cp -r', ssdir.orig, dir.name, sep=' ')) # Comment out for windows
system(paste('xcopy ', ssdir.orig, ' ', dir.name, '\\* ', '/E', sep='')) # Uncomment for Windows
parfile.infile <- paste(dir.name,'/',parfile, sep='')
conn <- file(parfile.infile, open='r')
parfile.intxt <- readLines(conn)
close(conn)
parfile.outtxt <- parfile.intxt
wantedline <- grep(parmstr.parfile,parfile.intxt)
parfile.outtxt[wantedline+1] <-  parm.vec[ii]
conn <- file(parfile.infile, open='w')
writeLines(parfile.outtxt, conn)
close(conn)
}
cl<-makeCluster(numcpus) # Uncomment for Windows
registerDoSNOW(cl) # Uncomment for Windows
foreach(ii=1:numdir) %dopar% {
dir.name <- paste(sprintf('%02d',ii),sprintf('%.2f',parm.vec[ii]),sep='_')
setwd(paste(origwd,'/',dir.name,sep=''))
print(paste(origwd,'/',dir.name,sep=''))
system(runss.str)
setwd(origwd)
}
stopCluster(cl) # Uncomment for Windows
setwd(origwd)
setwd(mainfolder)
dirvec <- dir(pattern=ssdirpattern)
SSreps <- SSgetoutput(dirvec=dirvec,getcovar=F, forecast=FALSE)
summaryoutput <- SSsummarize(SSreps)
lbf  <- summaryoutput$likelihoods_by_fleet
FleetNames <- summaryoutput$FleetNames[[1]]
summaryoutput$likelihoods[1,]
sizefreqlike_component <- (grep('Survey',fleetlike_components))
if (length(sizefreqlike_component) > 0) {
for (ii in 1:length(sizefreqlike_component)) {
sizefreqlike_label <- fleetlike_components[sizefreqlike_component[ii]]
sizefreqlambda_label <-  sub('like','lambda',sizefreqlike_label)
sizefreqlambda <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlambda_label, 4:ncol(summaryoutput$likelihoods_by_fleet)]
sizefreqlike <- summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, 4:ncol(summaryoutput$likelihoods_by_fleet)] * sizefreqlambda
summaryoutput$likelihoods_by_fleet[summaryoutput$likelihoods_by_fleet$Label == sizefreqlike_label, names(summaryoutput$likelihoods_by_fleet)=='ALL'] <- rowSums(sizefreqlike, na.rm=T)
}
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
if (showplot_yn) plotstuff()
if (pdf_yn) {
pdf(file=pdf.filename)
plotstuff()
dev.off()
}
if (png_yn) {
png(file=paste(png.filename,'_%d.png',sep=''))
plotstuff()
dev.off()
}
if (csv_yn) {
out <- printstuff()
write.table(out, file=csv.filename, sep=',', row.names=F)
}
